package main

//Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде. По завершению программа должна выводить итоговое значение счетчика.

import (
	"fmt"
	"sync"
	"sync/atomic"
)

type Counter struct {
	value int64 // Используем int64, что бы небыло переполнения
}

func (c *Counter) Increment() {
	atomic.AddInt64(&c.value, 1) //безопасно увеличиваем на 1 с использованием атомарных операций, что бы избежать "гонки"
}

func main() {

	const numRoutines = 1000 // Количество конкурентных горутин
	const iterations = 1000  // Количество итераций для каждой горутины

	counter := Counter{}  //создаем экземпляр структуры
	var wg sync.WaitGroup //создаем каунтер горутин

	// Запускаем горутины для увеличения счетчика
	for i := 0; i < numRoutines; i++ { //создаем горутины
		wg.Add(1) //+1 к счетчику горутни
		go func() {
			defer wg.Done()                   //гарантированно уменьшаем счетчик на 1
			for j := 0; j < iterations; j++ { //каждая горутина увеличивает счетчик на iterations раз
				counter.Increment() //инкрементируем
			}
		}()
	}

	wg.Wait() // Ожидаем завершения всех горутин

	fmt.Println("Итоговое значение счетчика:", counter.value)
}
