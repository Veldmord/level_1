package main

//Разработать программу, которая будет последовательно отправлять значения в канал, а с другой стороны канала — читать.
//По истечению N секунд программа должна завершаться.

import (
	"fmt"
	"time"
)

func main() {
	timeWork := 0 //переменная для хранения времени исполнения
	fmt.Print("Введите время исполнение программы в сек.: ")
	fmt.Scan(&timeWork) //задаем время исполнения в секундах

	chanMess := make(chan string) //создаем канал для обмена сообщениями

	go func() { //запускаем горутинку для отправки сообщений
		i := 1 //счетчик сообщений
		for {  // бесконечный цикл
			select {
			case <-chanMess: //обработка закрытия канала
				return //заканчиваем
			default:
				chanMess <- fmt.Sprintf("Message  %d", i) // отправляем в канал сообщение типа "Message  1408"
				i++                                       //+1
			}

		}
	}()

	go func() { //запускаем горутинку
		for mess := range chanMess { //читаем сообщение из канала при наличии, цикл блокируется до появления chanMess нового сообщения
			fmt.Printf("Сообщение из канала: %s\n", mess) //принтим
		}
	}()

	time.Sleep(time.Duration(timeWork) * time.Second) //ждем сколько положено

	close(chanMess) //закрываем канал

	fmt.Print("Game over!") //все!

}
